---
import MainInputField from "@/components/MainInputField.astro";
import SearchButton from "@/components/SearchButton.astro";
import SubInputField from "@/components/SubInputField.astro";
import Layout from "@/layout/Layout.astro";
import { countWords, getTime } from "@/lib/wordfeusk";
import { calculatePoints } from "@/lib/wordfeusk";
import { fetchWords, filterWords } from "@/lib/wordfeusk";
import type { WordObject } from "@/lib/wordfeusk";

const details = ["Use '?' for wildcard character behaviour."];
let possibleWords: WordObject[] = [];
let orignalLetters = "";
let startsWith = "";
let endsWith = "";
let payloadWord = "";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    let letters = data.get("letters") as string;
    startsWith = data.get("starting-with") as string;
    endsWith = data.get("ending-with") as string;
    orignalLetters = letters;

    if (startsWith === null) {
      startsWith = "";
    }

    if (endsWith === null) {
      endsWith = "";
    }

    if (startsWith) {
      letters += startsWith;
    }

    if (endsWith) {
      letters += endsWith;
    }

    const res = fetchWords(letters);
    const sortedWords = filterWords(res, startsWith, endsWith);

    if (letters.includes("?")) {
      payloadWord = letters;
    }

    for (const [key, value] of Object.entries(sortedWords)) {
      possibleWords.push({ length: parseInt(key), words: value });
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout>
  <h1 class="font-black text-base uppercase text-app-light-gray">wordfeusk</h1>
  <ul class="text-xs text-gray-400 font-semibold pb-2">
    {details && details.map((d) => <li>{d}</li>)}
  </ul>
  <form method="POST" autocomplete="off">
    <div>
      <MainInputField placeholder="your letters" value={orignalLetters} />
      <div class="flex justify-evenly">
        <SubInputField
          placeholder="starting with"
          componentId="starting-with"
        />
        <SubInputField
          placeholder="ending with"
          componentId="ending-with"
          marginLeft={true}
        />
        <SearchButton small={true} />
      </div>
    </div>
  </form>

  <div class="py-2 text-xs font-black opacity-75">
    {
      orignalLetters && getTime() > 0 && (
        <div>
          {endsWith === "" && startsWith === "" && (
            <div>
              <p>
                Found{" "}
                <span class="text-app-light-blue">
                  {countWords(possibleWords)}
                </span>{" "}
                words containing{" "}
                <span class="text-app-light-blue uppercase">
                  {orignalLetters}
                </span>{" "}
                in <span class="text-app-light-blue">{getTime() | 0}</span> ms.
              </p>
            </div>
          )}
          {endsWith !== "" && startsWith === "" && (
            <div>
              <p>
                Found{" "}
                <span class="text-app-light-blue">
                  {countWords(possibleWords)}
                </span>{" "}
                words containing{" "}
                <span class="text-app-light-blue uppercase">
                  {orignalLetters}
                </span>{" "}
                and ending with{" "}
                <span class="text-app-light-blue uppercase">{endsWith}</span> in{" "}
                <span class="text-app-light-blue">{getTime() | 0}</span> ms.
              </p>
            </div>
          )}
          {startsWith !== "" && endsWith === "" && (
            <div>
              <p>
                Found{" "}
                <span class="text-app-light-blue">
                  {countWords(possibleWords)}
                </span>{" "}
                words containing{" "}
                <span class="text-app-light-blue uppercase">
                  {orignalLetters}
                </span>{" "}
                and starting with{" "}
                <span class="text-app-light-blue uppercase">{startsWith}</span>{" "}
                in <span class="text-app-light-blue">{getTime() | 0}</span> ms.
              </p>
            </div>
          )}
          {startsWith !== "" && endsWith !== "" && (
            <div>
              <p>
                Found{" "}
                <span class="text-app-light-blue">
                  {countWords(possibleWords)}
                </span>{" "}
                words containing{" "}
                <span class="text-app-light-blue uppercase">
                  {orignalLetters}
                </span>
                , starting with{" "}
                <span class="text-app-light-blue uppercase">{startsWith}</span>{" "}
                and ending with{" "}
                <span class="text-app-light-blue uppercase">{endsWith}</span> in{" "}
                <span class="text-app-light-blue">{getTime() | 0}</span> ms.
              </p>
            </div>
          )}
        </div>
      )
    }
  </div>

  <div>
    {
      possibleWords.map((w) => {
        return (
          <div class="flex flex-wrap items-center gap-2">
            {w.words && w.words[0].length > 0 && (
              <div class="flex flex-wrap gap-2 my-2 rounded-lg bg-slate-800 p-2">
                {w.words.map((w) => (
                  <div class="text-sm border py-0.5 px-2.5 rounded-md font-extrabold bg-app-dark-blue text-offwhite outline-none border-none">
                    <p class="uppercase">
                      {w}{" "}
                      <span class="font-black text-xs opacity-70 text-yellow-500">
                        {" "}
                        {calculatePoints(w, payloadWord, startsWith, endsWith)}p
                      </span>
                    </p>
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })
    }
  </div>
</Layout>
