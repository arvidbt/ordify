---
import InputField from "@/components/InputField.astro";
import Layout from "@/layout/Layout.astro";
import { wordlib } from "@/lib/word-service";

const MIN_ALLOWED_CHARACTERS = 2;

const LETTERS: { [key: string]: string[] } = {
  ONE_POINT: ["a", "e", "i", "o", "u", "l", "n", "r", "s", "t"],
  TWO_POINTS: ["d", "g"],
  THREE_POINTS: ["b", "c", "m", "p"],
  FOUR_POINTS: ["f", "h", "v", "w", "y"],
  SEVEN_POINTS: ["k"],
  EIGHT_POINTS: ["j", "x"],
};

const LETTER_POINTS: { [key: string]: number } = {
  ONE_POINT: 1,
  TWO_POINTS: 2,
  THREE_POINTS: 3,
  FOUR_POINTS: 4,
  SEVEN_POINTS: 7,
  EIGHT_POINTS: 8,
};

type WordObject = {
  length: number;
  words: string[];
};

type FilteredWords = { [length: number]: string[] }

const possibleWords: WordObject[] = [];
let time = 0;
let orignalLetters = "";
let startsWith = "";
let endsWith = "";
let payloadWord = "";


function calculatePoints(word: string): number {
  let wordWorth = 0;
  for (let letter of word) {

    if (payloadWord && !payloadWord.includes(letter)) {
      continue;
    }

    for (const category in LETTERS) {
      if (LETTERS[category].includes(letter)) {
        wordWorth += LETTER_POINTS[category];
        break;
      }
    }
  }

  if ((word.length - payloadWord.split("?").length - 1 ) > 6) {
    wordWorth += 40;
  }

  return wordWorth;
}

function countWords(words: WordObject[]): number {
  let totalWords = 0;
  for (const items of words) {
    totalWords += items.words.length;
  }
  return totalWords;
}

function filterWords(words: string[]): FilteredWords {
  const sortedWords: FilteredWords = {};

    words.forEach((word) => {
      const length = word.length;
      if (length < MIN_ALLOWED_CHARACTERS) {
        return;
      }
      if (word.includes(":")) {
        return;
      }
      if (startsWith && startsWith !== "" && !word.startsWith(startsWith)) 
      {
        return;
      }
      if (endsWith && endsWith !== "" && !word.endsWith(endsWith)) {
        return;
      }
      if (word.length <= (endsWith.length + startsWith.length)) {
        return;
      }
      if (!sortedWords[length]) {
        sortedWords[length] = [];
      }
      sortedWords[length].push(word);
    });
    return sortedWords;
}

function fetchWords(payload: string): string[] {
  const start = performance.now();
  const words = wordlib.getWildcardWords(payload.toLowerCase());
  const end = performance.now();
  time = end - start;

  return words;
}

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    let letters = data.get("letters") as string;
    orignalLetters = letters;
    startsWith = data.get("extra-field-1") as string;
    endsWith = data.get("extra-field-2") as string;

    if (startsWith) {
      letters += startsWith;
    }

    if (endsWith) {
      letters += endsWith;
    }

    const res = fetchWords(letters);
    const sortedWords = filterWords(res);

    if (letters.includes("?")) {
      payloadWord = letters;
    }

    for (const [key, value] of Object.entries(sortedWords)) {
      possibleWords.push({ length: parseInt(key), words: value });
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---
<Layout>

  <InputField
    service="wordfeusk"
    details={["Use '?' for wildcard character behaviour."]}
    additionalInputs={true}
    mainInputFieldPlaceholder="your letters"
    additionalInputNames={["starting with", "ending with"]}
  />

  <div class="py-2 text-xs font-black opacity-75">
    {
      time > 0 && orignalLetters && endsWith === "" && startsWith === "" && (
      <div>
          <p>Found <span class="text-app-light-blue">{countWords(possibleWords)}</span> words containing <span class="text-app-light-blue uppercase">{orignalLetters}</span> in <span class="text-app-light-blue">{time | 0}</span> ms.</p>
        </div>
      )
    }
    {
      time > 0 && orignalLetters && endsWith !== "" && startsWith === "" && (
        <div>
          <p>Found <span class="text-app-light-blue">{countWords(possibleWords)}</span> words containing <span class="text-app-light-blue uppercase">{orignalLetters}</span> and ending with <span class="text-app-light-blue uppercase">{endsWith}</span> in <span class="text-app-light-blue">{time | 0}</span> ms.</p>
        </div>
      )
    }
    {
      time > 0 && orignalLetters && startsWith !== "" && endsWith === "" && (
        <div>
          <p>Found <span class="text-app-light-blue">{countWords(possibleWords)}</span> words containing <span class="text-app-light-blue uppercase">{orignalLetters}</span> and starting with <span class="text-app-light-blue uppercase">{startsWith}</span> in <span class="text-app-light-blue">{time | 0}</span> ms.</p>
        </div>
      )
    }
    {
      time > 0 && orignalLetters && startsWith !== "" && endsWith !== "" && (
        <div>
          <p>Found <span class="text-app-light-blue">{countWords(possibleWords)}</span> words containing <span class="text-app-light-blue uppercase">{orignalLetters}</span>, starting with <span class="text-app-light-blue uppercase">{startsWith}</span> and ending with <span class="text-app-light-blue uppercase">{endsWith}</span> in <span class="text-app-light-blue">{time | 0}</span> ms.</p>

        </div>
      )
    }

  </div>
  <div class="">
    {
      possibleWords.map((w) => {
        return (
          <div class="flex flex-wrap items-center gap-2">
            {w.words && w.words[0].length > 0 && (
              <div class="flex flex-wrap gap-2 my-2 rounded-lg bg-slate-800 p-2">
                {w.words.map((w) => (
                  <div class="text-sm border py-0.5 px-2.5 rounded-md font-extrabold bg-app-dark-blue text-offwhite outline-none border-none">
                    <a href=`https://www.synonymer.se/sv-syn/${w}` target="_blank">
                    <p class="uppercase">
                      {w}{" "}
                      <span class="font-black text-xs opacity-70 text-yellow-500">
                        {" "}
                        {calculatePoints(w)}p
                      </span>
                    </p>
                  </a>
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })
    }
  </div>
</Layout>
