---
import InputField from "@/components/InputField.astro";
import Layout from "@/layout/Layout.astro";
import { wordlib } from "@/lib/word-service";

const MIN_ALLOWED_CHARACTERS = 2;

type wordArrayType = {
  length: number;
  words: string[];
};

const words: string[] = [];
const sortedWords: wordArrayType[] = [];
const wordLengths: { [length: number]: string[] } = {};

const wordlibWords = wordlib.palindromes();
words.push(...wordlibWords);
words.forEach((word) => {
  const length = word.length;
  if (length <= MIN_ALLOWED_CHARACTERS) {
    return;
  }
  if (!wordLengths[length]) {
    wordLengths[length] = [];
  }
  if (word.includes(":")) {
    return;
  }
  wordLengths[length].push(word);
});

for (const [key, value] of Object.entries(wordLengths)) {
  sortedWords.push({ length: parseInt(key), words: value });
}
---

<Layout>
  <p class="text-xs font-semibold opacity-75 py-3">
    The <span class="text-app-light-blue">palindromes</span>
     feature checks the current dictionary for all palindromes.
  </p>
  <h1 class="font-black text-base uppercase text-app-light-gray">
    Palindromes
  </h1>
  <div class="py-4">
    {
      sortedWords.map((w) => {
        return (
          <div class="flex flex-wrap items-center gap-2">
            {w.words && w.words.length > 0 && (
              <div class="flex flex-wrap gap-2 my-2 rounded-lg bg-slate-800 p-2">
                {w.words.map((w) => (
                  <div class="text-sm border py-0.5 px-2.5 rounded-md font-extrabold bg-app-dark-blue text-offwhite outline-none border-none">
                    <p class="uppercase">{w} </p>
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })
    }
  </div>
</Layout>
